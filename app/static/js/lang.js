// Generated by CoffeeScript 1.10.0

/*
Author: Jason Gwartz
2016
 */
var ForLoop, IfConditional, SoundNode, Wrapper,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Wrapper = (function() {
  Wrapper.instances = [];

  function Wrapper(name1, extra_html) {
    this.name = name1;
    Wrapper.instances.push(this);
    this.html = "<div class=\"node node-wrapper\" id=\"" + this.name + "\">\n  <h2>" + this.name + "</h2>\n  " + extra_html + "\n</div>";
  }

  Wrapper.parse_input = function(str) {
    var i;
    return (function() {
      var j, len, ref, results;
      ref = str.replace(/\D/g, " ").split(" ");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(parseInt(i));
      }
      return results;
    })();
  };

  Wrapper.prototype.eval_input = function(jq) {
    return this.check(jq.find("select").val(), jq.find("input").val(), jq);
  };

  return Wrapper;

})();

IfConditional = (function(superClass) {
  var extra_html, name;

  extend(IfConditional, superClass);

  name = "If";

  extra_html = "<select class=\"form-control\" id=\"if-select\">\n    <option value=\"beat\">Beat</option>\n    <option value=\"bar\">Bar</option>\n    <option value=\"phrase\">Phrase</option>\n  </select>\n<input type=\"text\" id=\"if-input\" class=\"form-control\">";

  function IfConditional() {
    IfConditional.__super__.constructor.call(this, name, extra_html);
  }

  return IfConditional;

})(Wrapper);

ForLoop = (function(superClass) {
  var extra_html, name;

  extend(ForLoop, superClass);

  name = "For";

  extra_html = "<input type=\"text\" id=\"for-input\" class=\"form-control\">\n<select class=\"form-control\" id=\"for-select\">\n    <option value=\"beat\">Beats</option>\n    <option value=\"bar\">Bars</option>\n    <option value=\"phrase\">Phrases</option>\n  </select>";

  function ForLoop() {
    ForLoop.__super__.constructor.call(this, name, extra_html);
  }

  ForLoop.prototype.for_loop = function(loop_block, number_loops) {
    if (loop_block === "phrases") {
      return pass();
    } else if (loop_block === "bars") {
      return pass();
    } else if (loop_block === "beats") {
      return pass();
    }
  };

  return ForLoop;

})(Wrapper);

SoundNode = (function() {
  SoundNode.tray_instances = [];

  SoundNode.canvas_instances = [];

  function SoundNode(instrument) {
    var i, node_number;
    this.instrument = instrument;
    node_number = ((function() {
      var j, len, ref, results;
      ref = SoundNode.canvas_instances;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (i.instrument === this.instrument) {
          results.push(i);
        }
      }
      return results;
    }).call(this)).length + 1;
    this.id = (function() {
      switch (node_number) {
        case 1:
          return this.instrument.name;
        default:
          return this.instrument.name + node_number;
      }
    }).call(this);
    this.wrappers = {
      conditionals: {},
      forloops: {}
    };
    this.playing_phrases = [];
    this.html = "<div class=\"node-sample-container\" id=\"" + this.id + "-container\">\n  <div class=\"wrappers\">\n  </div>\n  <div class=\"node node-sample\" id=\"" + this.id + "\">\n    <h2>" + this.id + "</h2>\n  </div>\n  </div>";
  }

  SoundNode.prototype.phrase_eval = function() {
    var bar_beats, br, bt, c, i, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, m, n, o, p, playing_phrases, q, r, ref, ref1, ref2, ref3, ref4, results, s, w;
    this.wrappers.conditionals = {};
    c = this.wrappers.conditionals;
    ref = $("#" + this.id + "-container").find(".wrappers");
    for (j = 0, len = ref.length; j < len; j++) {
      w = ref[j];
      ref1 = $(w).children("#If");
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        i = ref1[k];
        c[$(i).find("select").val()] = {
          input: Wrapper.parse_input($(i).find("input").val()),
          data: $(i).data("Wrapper")
        };
      }
    }
    if (c.phrase != null) {
      playing_phrases = c.phrase.input;
      if (indexOf.call(playing_phrases, phrase) < 0) {
        return;
      }
    } else {
      playing_phrases = [];
    }
    if (c.bar != null) {
      if (c.beat != null) {
        bar_beats = [];
        ref2 = c.bar.input;
        for (l = 0, len2 = ref2.length; l < len2; l++) {
          br = ref2[l];
          ref3 = c.beat.input;
          for (m = 0, len3 = ref3.length; m < len3; m++) {
            bt = ref3[m];
            bar_beats.push(bt + ((br - 1) * 4));
          }
        }
        for (n = 0, len4 = bar_beats.length; n < len4; n++) {
          p = bar_beats[n];
          this.instrument.add(p);
        }
      } else {
        bar_beats = (function() {
          var len5, o, ref4, results;
          ref4 = c.bar.input;
          results = [];
          for (o = 0, len5 = ref4.length; o < len5; o++) {
            i = ref4[o];
            results.push(1 + (i - 1) * 4);
          }
          return results;
        })();
        for (o = 0, len5 = bar_beats.length; o < len5; o++) {
          p = bar_beats[o];
          this.instrument.add(p);
        }
      }
      return;
    }
    if (c.beat != null) {
      bar_beats = [];
      for (br = q = 1; q <= 4; br = ++q) {
        ref4 = c.beat.input;
        for (r = 0, len6 = ref4.length; r < len6; r++) {
          bt = ref4[r];
          bar_beats.push(bt + ((br - 1) * 4));
        }
      }
      results = [];
      for (s = 0, len7 = bar_beats.length; s < len7; s++) {
        p = bar_beats[s];
        results.push(this.instrument.add(p));
      }
      return results;
    }
  };

  return SoundNode;

})();
