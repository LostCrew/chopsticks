// Generated by CoffeeScript 1.10.0

/*
Author: Jason Gwartz
2016
 */
var LoadedSample, PlaySound, SoundContainer, context, final_gain, main, output_chain, sample_urls, samples, startPlayback, t, track;

sample_urls = ["../samples/drum_bass_hard.wav", "../samples/drum_snare_hard.wav", "../samples/drum_cymbal_closed.wav"];

context = null;

samples = null;

t = null;

final_gain = null;

output_chain = null;

LoadedSample = (function() {
  function LoadedSample(file) {
    var request, self;
    this.file = file;
    request = new XMLHttpRequest();
    request.open('GET', this.file, true);
    request.responseType = 'arraybuffer';
    self = this;
    request.onload = function() {
      self.data = request.response;
      return context.decodeAudioData(self.data, function(decoded) {
        return self.decoded = decoded;
      }, null);
    };
    request.send();
  }

  LoadedSample.prototype.play = function(n) {
    var source;
    if (isNaN(n)) {
      return;
    }
    source = context.createBufferSource();
    source.buffer = this.decoded;
    source.connect(output_chain);
    return source.start(n);
  };

  return LoadedSample;

})();

PlaySound = (function() {
  function PlaySound(sample, beat) {
    this.sample = sample;
    this.beat = beat;
  }

  return PlaySound;

})();

SoundContainer = (function() {
  function SoundContainer() {
    this.buffer = [];
  }

  SoundContainer.prototype.prepare = function() {
    var i, index, inputs, j, loaded, n, ref, results, v;
    t = context.currentTime;
    loaded = true;
    [
      (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = samples.length; j < len; j++) {
          i = samples[j];
          results.push(i.data === void 0 ? loaded = false : void 0);
        }
        return results;
      })()
    ];
    if (!loaded) {
      return alert("Samples still loading, please wait.");
    } else {
      inputs = (function() {
        var j, len, ref, results;
        ref = ["bd", "sd", "cym"];
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          v = ref[j];
          results.push(document.getElementById(v).value.split(' '));
        }
        return results;
      })();
      results = [];
      for (index = j = 0, ref = inputs.length; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
        results.push((function() {
          var k, len, ref1, results1;
          ref1 = inputs[index];
          results1 = [];
          for (k = 0, len = ref1.length; k < len; k++) {
            n = ref1[k];
            if (function() {
              console.log(isNaN(n));
              return !isNaN(n);
            }) {
              results1.push(this.add(new PlaySound(samples[index], t + parseFloat(n))));
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    }
  };

  SoundContainer.prototype.add = function(p) {
    return this.buffer.push(p);
  };

  SoundContainer.prototype.play = function() {
    var i, j, len, ref, results;
    ref = this.buffer;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(i.sample.play(i.beat));
    }
    return results;
  };

  return SoundContainer;

})();

startPlayback = function() {
  var track;
  track = new SoundContainer();
  track.prepare();
  track.play();
  return setTimeout((function() {
    return startPlayback();
  }), 4000);
};

track = null;

main = function() {
  var HEIGHT, WIDTH, analyser, bufferLength, canvas, canvasCtx, dataArray, draw, i, j, len, ready;
  window.AudioContext = window.AudioContext || window.webkitAudioContext;
  context = new AudioContext();
  output_chain = context.createGain();
  final_gain = context.createGain();
  final_gain.connect(context.destination);
  samples = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = sample_urls.length; j < len; j++) {
      i = sample_urls[j];
      results.push(new LoadedSample(i));
    }
    return results;
  })();
  while (true) {
    console.log("in");
    ready = true;
    for (j = 0, len = samples.length; j < len; j++) {
      i = samples[j];
      if (i.data === void 0) {
        (function() {
          ready = false;
          console.log("not ready");
          return setTimeout((function() {}), 0.5);
        });
      }
    }
    if (ready) {
      console.log("ready");
      break;
    }
  }
  analyser = context.createAnalyser();
  analyser.connect(final_gain);
  analyser.fftSize = 2048;
  bufferLength = analyser.fftSize;
  dataArray = new Uint8Array(bufferLength);
  HEIGHT = 100;
  WIDTH = window.innerWidth;
  canvas = document.getElementById("visual");
  canvas.width = WIDTH;
  canvas.height = HEIGHT;
  canvasCtx = canvas.getContext("2d");
  canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);
  draw = function() {
    var drawVisual, k, ref, sliceWidth, v, x, y;
    drawVisual = requestAnimationFrame(draw);
    analyser.getByteTimeDomainData(dataArray);
    canvasCtx.fillStyle = 'rgb(255, 255, 255)';
    canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);
    canvasCtx.lineWidth = 2;
    canvasCtx.strokeStyle = 'rgb(0, 0, 0)';
    canvasCtx.beginPath();
    sliceWidth = WIDTH * 1.0 / bufferLength;
    x = 0;
    for (i = k = 0, ref = bufferLength; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      v = dataArray[i] / 128.0;
      y = v * HEIGHT / 2;
      if (i === 0) {
        canvasCtx.moveTo(x, y);
      } else {
        canvasCtx.lineTo(x, y);
      }
      x += sliceWidth;
    }
    canvasCtx.lineTo(canvas.width, canvas.height / 2);
    return canvasCtx.stroke();
  };
  draw();
  return output_chain.connect(analyser);
};
