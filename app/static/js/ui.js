// Generated by CoffeeScript 1.10.0

/*
Author: Jason Gwartz
2016
 */
var canvas_init, ui_init, update_beat_labels;

canvas_init = function() {
  var glob;
  glob = this;
  $("#node-canvas").droppable({
    hoverClass: "node-canvas-hover",
    tolerance: "pointer",
    scope: "tray",
    drop: function(evt, ui) {
      var i, new_sn, sn;
      if (ui.draggable.hasClass("node-wrapper")) {
        if (!ui.draggable.hasClass("on-canvas")) {
          ui.draggable.clone().appendTo("#node-canvas").addClass("on-canvas").draggable({
            helper: "original",
            scope: "canvas"
          }).data("Wrapper", ui.draggable.data("Wrapper"));
        }
      } else {
        if (!ui.draggable.hasClass("on-canvas")) {
          sn = ui.draggable.data("SoundNode");
          new_sn = new SoundNode(sn.instrument);
          SoundNode.canvas_instances.push(new_sn);
          i = new_sn.instrument;
          i.is_live = true;
          ui.draggable.clone().appendTo($("#node-canvas")).addClass("on-canvas").draggable({
            helper: "original",
            scope: "canvas"
          }).droppable({
            accept: ".node-wrapper",
            scope: "canvas",
            tolerance: "pointer",
            drop: function(evt, ui) {
              return ui.draggable.appendTo($(this).find(".wrappers")).draggable("disable").position({
                of: $(this).find(".node-sample"),
                my: "bottom",
                at: "top"
              }).css("top", "0px");
            }
          }).data("SoundNode", new_sn).find(".wrappers").sortable({
            stop: function(evt, ui) {}
          });
        }
      }
      if (!glob.playing) {
        glob.playing = true;
        return startPlayback(output_chain, context.currentTime);
      }
    }
  });
  return $("#node-tray").droppable({
    scope: "canvas",
    drop: function(evt, ui) {
      var sn;
      sn = ui.draggable.find(".node-sample").data("SoundNode");
      sn.is_live = false;
      return ui.draggable.remove();
    }
  });
};

ui_init = function() {
  var j, k, len, len1, n, ref, ref1, results, w;
  canvas_init();
  ref = SoundNode.tray_instances;
  for (j = 0, len = ref.length; j < len; j++) {
    n = ref[j];
    $(n.html).appendTo($("#node-tray")).draggable({
      helper: "clone",
      scope: "tray"
    }).data("SoundNode", n);
  }
  ref1 = Wrapper.instances;
  results = [];
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    w = ref1[k];
    results.push($(w.html).appendTo($("#node-tray")).draggable({
      scope: "tray",
      helper: "clone"
    }).data("Wrapper", w));
  }
  return results;
};

update_beat_labels = function() {
  return $("#beat_label").text(phrase + ":" + bar + ":" + beat);
};
