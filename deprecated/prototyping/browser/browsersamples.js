// Generated by CoffeeScript 1.10.0
(function() {
  var LoadedBuffer, a, arr, b, c, context, playall;

  console.log("started");

  window.AudioContext = window.AudioContext || window.webkitAudioContext;

  context = new AudioContext();

  LoadedBuffer = (function() {
    function LoadedBuffer(file) {
      this.file = file;
    }

    LoadedBuffer.prototype.init = function() {
      var request, self;
      self = this;
      request = new XMLHttpRequest();
      request.open('GET', this.file, true);
      request.responseType = 'arraybuffer';
      request.onload = function() {
        var i, l, len, load;
        self.data = request.response;
        console.log("loaded");
        load = true;
        for (l = 0, len = arr.length; l < len; l++) {
          i = arr[l];
          [i.data === void 0 ? load = false : void 0];
        }
        if (load) {
          return playall();
        }
      };
      return request.send();
    };

    LoadedBuffer.prototype.play = function(n) {
      return context.decodeAudioData(this.data, function(decoded) {
        this.source = context.createBufferSource();
        this.source.buffer = decoded;
        this.source.connect(context.destination);
        this.source.start(n);
        return console.log("playing");
      }, null);
    };

    return LoadedBuffer;

  })();

  a = new LoadedBuffer("../samples/drum_bass_hard.wav");

  b = new LoadedBuffer("../samples/drum_cymbal_closed.wav");

  c = new LoadedBuffer("../samples/drum_snare_hard.wav");

  arr = [a, b, c];

  a.init();

  b.init();

  c.init();

  playall = function() {
    var i, j, k, l, m, o, results;
    console.log("playall");
    for (i = l = 0; l <= 8; i = l += 2) {
      a.play(i);
    }
    for (j = m = 0; m <= 8; j = m += 0.5) {
      b.play(j);
    }
    results = [];
    for (k = o = 1; o <= 8; k = o += 2) {
      results.push(c.play(k));
    }
    return results;
  };

}).call(this);
